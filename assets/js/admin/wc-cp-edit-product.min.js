jQuery( function($) {
	
	// wc_cp_edit_product is required to continue, ensure the object exists
	if ( typeof wc_cp_admin_params === 'undefined' ) {
		return false;
	}

	var Component = Backbone.Model.extend({
		
		defaults: {
			title: '',
			source: 'default',
			style: 0
		}
		
	});
	
	var Components = Backbone.Collection.extend({
		model: Component
	});
	
	var Option = Backbone.Model.extend({});
	
	var Options = Backbone.Collection.extend({
		model: Option
	});
	
	var Product = Backbone.Model.extend({
		
		initialize: function() {
			this.on('change', function() {
				$( '.help_tip' ).tipTip({
					'attribute': 'data-tip',
					'fadeIn':    50,
					'fadeOut':   50,
					'delay':     200
				});
			});
		},
		
		defaults: {
			style: 'dropdown',
			build_sku: false,
			components: new Components()
		},
		
		addComponent: function(e) {
			
			e.preventDefault();
			
			this.get('components').add(new Component());
			
			this.trigger( 'change:components' );
			this.trigger( 'change' );
			
		}
		
	});
	
	var product = new Product( wc_cp_admin_params.product );
	
	rivets.formatters['>'] = function (value, arg) {
		return parseFloat(value) > parseFloat(arg);
	}
	
	rivets.formatters['='] = function (value, arg) {
		return value == arg;
	}
	
	rivets.formatters['IN'] = function (value, arg) {
		return arg.indexOf(value) > -1;
	}
	
	rivets.configure({
	  	handler: function(context, ev, binding) {
			this.call(binding.model, ev, context)
	  	}
	});
	
	var bindings = $('.js-cp-product-bind');
	
	// Subsubsub navigation

	$( 'body' ).on( 'click', '.js-component-list a', function(e) {

		$( this ).closest( '.js-component-list' ).find( 'a' ).removeClass( 'current' );
		$( this ).addClass( 'current' );

		$( this ).closest( '.js-component' ).find( '.js-component-page' ).addClass( 'hide' );

		var tab = $( this ).data( 'tab' );

		$( this ).closest( '.js-component' ).find( '.js-component-page-' + tab ).removeClass( 'hide' );

		e.preventDefault();

	} );
	
	rivets.bind( bindings, {
    	product: product
	});

});
