jQuery(document).ready(function($) {
	
	// wc_checkout_params is required to continue, ensure the object exists
	if ( typeof wc_cp_product_data === 'undefined' ) {
		return false;
	}
	
	$.blockUI.defaults.overlayCSS.cursor = 'default';
	
	Number.prototype.formatMoney = function(c, d, t) {
		
		var n = this, 
		    c = isNaN(c = Math.abs(c)) ? 2 : c, 
		    d = d == undefined ? "." : d, 
		    t = t == undefined ? "," : t, 
		    s = n < 0 ? "-" : "+", 
		    i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
		    j = (j = i.length) > 3 ? j % 3 : 0;
		    
		return s + wc_cp_params.currency + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
		
 	};
	
	var Option = Backbone.Model.extend({
		initialize: function() {
			this.set('display', this.get('title') + ' [' + this.get('price').formatMoney() + ']');
		},
		defaults: {
			id: null,
			title: '',
			display: '',
			price: 0,
			sku: '',
			available: false,
		}
	});
	
	var Options = Backbone.Collection.extend({
		model: Option
	});
	
	var Component = Backbone.Model.extend({
		initialize: function(){
			this.set('empty_text', this.get('empty_text') + ( this.get('optional') ? ' (optional)' : ' (required)'));
			this.set('options', new Options(this.get('options')));
		},
		defaults: {
			id: null,
			name : '',
			title: '',
			style: 'dropdown',
			options: [],
			selection: 0,
			optional: true,
			sku_order: 0,
			empty_text: 'None'
		},
		update_option: function(e, el) {
			
			var option = this.get('options').get( $(el).val() );
			
			if( option instanceof Option ) {
				
				this.set('selection', option);
				
			} else {
				
				this.set('selection', 0);
				
			}
			
		},
		close: function(e, el) {
			
			e.preventDefault();
			
			$(el).closest('.component').toggleClass('closed').find('.component_inner').slideToggle();
			
		}
	});
	
	var Components = Backbone.Collection.extend({
		model: Component
	});
	
	var Scenario = Backbone.Model.extend();
	
	var Scenarios = Backbone.Collection.extend({
		model: Scenario
	});
	
	var Product = Backbone.Model.extend({
		initialize: function(){
			this.set('components', new Components(this.get('components')));
			this.set('scenarios', new Scenarios(this.get('scenarios')));
			this.listenTo(this.get('components'), 'change', this.evaluate);
			this.evaluate();
		},
		defaults: {
			sku: '',
			weight: 0,
			components: [],
			scenarios: [], 
			base_price: 0,
			base_weight: 0,
			base_sku: '',
			price: 0,
			weight: 0,
			sku: '',
			errors: 0,
			selections: 0,
		},
		evaluate: function() {
			
			var product = this;
				price = this.get('base_price'),
				weight = this.get('base_weight'),
				sku = [this.get('base_sku')],
				errors = 0,
				selections = 0;
			
			this.get('components').each(function(component) {
				
				var selection = component.get('selection'),
					sku_order = component.get('sku_order');
				
				if( selection instanceof Option ) {
					
					price += selection.get('price');
					weight += selection.get('weight');
					
					if( sku_order > 0 ) {
						
						sku[sku_order] = selection.get('sku');
						
					}

					selections++;
					
				} else {
					
					if( ! component.get('optional') ) {
						
						errors++;
						
					}
					
				}
				
				component.get('options').each(function(option) {
					
					product.get('scenarios').each(function(scenario) {
						
						if( $.inArray(option.get('id'), scenario.get(component.get('id')) || [] ) > -1 ) {
							
							option.set('available', true);
							
							return false;
							
						}
						
					});
					
				});
				
			});
			
			this.set('price', price);
			this.set('weight', weight);
			this.set('sku', sku.join(''));
			this.set('errors', errors);
			this.set('selections', selections);
				
		},
		add_to_cart: function() {
			alert('t');
		}
	});
	
	var product = new Product(wc_cp_product_data);
	
	rivets.formatters['='] = function (value, arg) {
		return value == arg;
	}
	
	rivets.formatters['!='] = function (value, arg) {
		return value != arg;
	}
	
	rivets.formatters['!'] = function (value) {
		return !value;
	}
	
	rivets.formatters['>'] = function (value, arg) {
		return value > arg;
	}
	
	rivets.formatters['>='] = function (value, arg) {
		return value >= arg;
	}
	
	rivets.formatters['<'] = function (value, arg) {
		return value < arg;
	}
	
	rivets.formatters['<='] = function (value, arg) {
		return value <= arg;
	}
	
	rivets.formatters.and = function(comparee, comparator) {
	    return comparee && comparator;
	};
	
	rivets.formatters.or = function(comparee, comparator) {
	    return comparee || comparator;
	};
	
	rivets.configure({
	  	handler: function(context, ev, binding) {
			this.call(binding.model, ev, context)
	  	}
	});
	
	rivets.bind( $('.js-composite-product-bind'), {
    	product: product
	});
	
});